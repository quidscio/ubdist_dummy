
# WARNING: May be untested .

# WARNING: As much as ~100GB temporary storage may be required.
# https://github.community/t/bigger-github-hosted-runners-disk-space/17267
#  2vCPU, 7GiB RAM, 14GiB SSD
#  16vCPU, 56GiB RAM, 112GiB SSD
# Github Actions may have a higher capacity (presumably HDD) or 'C:\' disk, contrasted with the small 'Temp storage' SSD. Apparently does not apply to Linux 'runners'.
# BuildJet may use some larger instances, at much higher price. Apparently BuildJet instances have 61GB .
# Cloud VPS, through cloud-init and other APIs, may be much more cost effective.

# ATTENTION: NOTICE: Consider replacing the current directory with a symlink to a larger filesystem, before checkout of repository.

name: zCustom-monolithic


# https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#permissions
permissions:
  actions: write
  checks: read
  contents: write
  deployments: read
  issues: none
  packages: read
  pull-requests: read
  repository-projects: read
  security-events: none
  statuses: read


on:
  #push:
  workflow_dispatch:
    inputs:
      releaseLabel:
        required: false
        #default: base
        default: internal
        type: choice
        options:
        - latest
        - internal
        - base
      devfast:
        type: boolean
        default: true
      skimfast:
        type: boolean
        default: false
      qemuNoKVM:
        type: boolean
        default: false
      runnerName:
        required: false
        default: ubuntu-latest-m
        type: choice
        options:
        - ubuntu-latest
        - ubuntu-latest-m
  # https://docs.github.com/en/actions/using-workflows/events-that-trigger-workflows#schedule
  #schedule:
    #- cron: '5 7 * * 6'
    #- cron: '5 1 * * 6'
    #- cron: '5 1 * * 2,4'
    #- cron: '5 1 * * 2'
    #- cron: '5 1 * * 4'
    #- cron: '5 1 * * 5'
    #- cron: '5 7 15 * *'

# https://docs.github.com/en/actions/using-jobs/using-concurrency
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Adding 'core' and 'live' images could be separate jobs if necessary.
# Conveniently separable code for 'experiment', and may add additional build time.
# Disadvantage of downloading back from rclone, and duplicating such preparation as deleting files from CI.
# Better to just copy relevant markup to separate CI config files, which would be the desired end result anyway.
# https://docs.github.com/en/actions/using-jobs/using-jobs-in-a-workflow
# https://stackoverflow.com/questions/68187987/github-actions-job-timeout
#  'Each job in a workflow can run for up to 6 hours'
  #core:
    #if: ${{ always() }}
    #needs: [build]
  #live:
    #if: ${{ always() }}
    #needs: [build, core]


jobs:
  #build_release:
    #runs-on: ubuntu-latest
    #steps:



  build:
    #needs: [build_release]
    # https://docs.github.com/en/actions/using-github-hosted-runners/about-github-hosted-runners
    #  '7 GB of RAM memory'
    #  '14 GB of SSD disk space'
    # ATTRIBUTION: Github Copilot Chat 2023-08-10 .
    runs-on: ${{ github.event.inputs.runnerName == '' && 'ubuntu-latest' || github.event.inputs.runnerName }}
    #runs-on: ubuntu-latest
    #runs-on: ubuntu-22.04
    #runs-on: ubuntu-20.04
    #runs-on: ubuntu-18.04
    # Apparently both 'buildjet-2vcpu-ubuntu-2004' and 'buildjet-16vcpu-ubuntu-2004' have 61GB .
    #runs-on: buildjet-2vcpu-ubuntu-2004
    #runs-on: buildjet-16vcpu-ubuntu-2004
    # https://github.com/easimon/maximize-build-space
    steps:
      - name: RAND_SEED
        shell: bash
        run: |
          echo "$RAND_SEED" | tee /dev/urandom > /dev/null
          echo "$RAND_SEED" | tee /dev/random > /dev/null
          echo "$RAND_SEED" | sudo -n tee /dev/urandom > /dev/null
          echo "$RAND_SEED" | sudo -n tee /dev/random > /dev/null
        env:
          RAND_SEED: ${{ secrets.RAND_SEED }}
    
      - name: report! API Rate Limit
        shell: bash
        run: |
          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ""${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28"  https://api.github.com/rate_limit
          #curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit | jq -r ".rate"
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1
          submodules: 'recursive'
      - name: release! create
        shell: bash
        run: |
          gh release create build-${{ github.run_id }}-${{ github.run_attempt }} --title build --notes ""
        env:
          GH_TOKEN: ${{ github.token }}
      - name: report! API Rate Limit
        shell: bash
        run: |
          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ""${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28"  https://api.github.com/rate_limit
          #curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit | jq -r ".rate"
    
    
      - name: users
        shell: bash
        run: |
          sudo -u ubuntu -n bash -c 'sudo -n useradd runner --non-unique -u $UID -g $UID' || true
          sudo -u ubuntu -n bash -c 'sudo -n groupadd runner --non-unique -g $UID' || true
          sudo -u runner -n bash -c 'sudo -n echo $USER $UID' || true
          true
      # Apparently may increase buildJet 'runner' to 77GB (instead of 61GB).
      # Apparently may increase Github Actions 'runner' to 59GB (instead of 31GB) .
      - name: Maximize build space
        if: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
        uses: easimon/maximize-build-space@master
        with:
          ##root-reserve-mb: 512
          ##root-reserve-mb: 1450
          ##root-reserve-mb: 950
          #root-reserve-mb: 1750
          root-reserve-mb: 1625
          ##temp-reserve-mb: 100
          ##temp-reserve-mb: 300
          ##temp-reserve-mb: 300
          #temp-reserve-mb: 700
          temp-reserve-mb: 50
          ##swap-size-mb: 128
          ##swap-size-mb: 192
          #swap-size-mb: 8
          swap-size-mb: 2
          #swap-size-mb: 384
          #remove-dotnet: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-dotnet: 'true'
          #remove-android: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-android: 'true'
          #remove-haskell: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-haskell: 'true'
          #remove-codeql: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-codeql: 'true'
          #remove-docker-images: ${{ github.event.inputs.runnerName != 'ubuntu-latest-m' }}
          remove-docker-images: 'true'
      # https://github.com/orgs/community/discussions/8305
      # https://github.blog/changelog/2023-02-23-hardware-accelerated-android-virtualization-on-actions-windows-and-linux-larger-hosted-runners/
      # https://github.com/actions/runner-images/discussions/7191
      - name: Enable KVM group perms
        if: ${{ github.event.inputs.runnerName == 'ubuntu-latest-m' }}
        shell: bash
        run: |
          #echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo -n tee /etc/udev/rules.d/99-kvm4all.rules
          echo 'KERNEL=="kvm", GROUP="docker", MODE="0664", OPTIONS+="static_node=kvm"' | sudo -n tee /etc/udev/rules.d/99-kvm4all.rules
          sudo -n udevadm control --reload-rules
          sudo -n udevadm trigger --name-match=kvm
          sudo -n apt-get update
          sudo -n apt-get install -y libvirt-clients libvirt-daemon-system libvirt-daemon virtinst bridge-utils qemu qemu-system-x86
          sudo -n usermod -a -G kvm $USER
          sudo -n usermod -a -G libvirt $USER
          sudo -n usermod -a -G docker $USER
          sudo -n adduser $USER kvm
          #sudo -n chown -R $USER:kvm /dev/kvm
          sudo -n chown -R $USER:docker /dev/kvm
          ls -l /dev/kvm
          ls -l /dev/kvm*
          echo $USER
          groups
          sudo -n lsmod | grep kvm
          sudo -n modprobe -r kvm_intel
          sudo -n modprobe -r kvm_amd
          sudo -n modprobe -r kvm
          ( grep --color vmx /proc/cpuinfo && sudo -n modprobe kvm_intel ) || ( grep --color svm /proc/cpuinfo && sudo -n modprobe kvm_amd )
          sudo -n modprobe kvm
          sudo -n lsmod | grep kvm
          #sudo -n chown -R $USER:kvm /dev/kvm
          sudo -n chown -R $USER:docker /dev/kvm
          ls -l /dev/kvm
          ls -l /dev/kvm*
      - name: Check KVM group perms
        if: ${{ github.event.inputs.runnerName == 'ubuntu-latest-m' }}
        shell: bash
        run: |
          grep --color svm /proc/cpuinfo || true
          grep --color vmx /proc/cpuinfo || true
          sudo -n lsmod | grep kvm
          ls -l /dev/kvm
          ls -l /dev/kvm*
          echo $USER
          groups
      - name: Check Network Services
        if: ${{ github.event.inputs.runnerName == 'ubuntu-latest-m' }}
        shell: bash
        run: |
          sudo -n netstat -l -p
      - name: _getCore_ub
        shell: bash
        timeout-minutes: 90
        run: |
          mkdir -p ~/core/infrastructure
          cd ~/core/infrastructure
          git clone --depth 1 --recursive https://github.com/mirage335-colossus/ubiquitous_bash.git
          cd ubiquitous_bash
          ./_setupUbiquitous.bat
      - name: _getMinimal_cloud
        shell: bash
        run: |
          ! ~/core/infrastructure/ubiquitous_bash/ubiquitous_bash.sh _getMinimal_cloud && exit 1
          true
          #! sudo -n apt-get -y clean && exit 1
          df -h
          df -h /
        timeout-minutes: 90
      #- name: changeDisk
        #shell: bash
        #run: |
          #false
      - uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: _getMinimal_cloud
        shell: bash
        run: |
          ! ./ubiquitous_bash.sh _getMinimal_cloud && exit 1
          true
          #! sudo -n apt-get -y clean && exit 1
          df -h
          df -h /
        timeout-minutes: 355
      ## For VBoxManage for _convert . Otherwise historically not apparently necessary.
      #- name: _getMost_ubuntu22-VBoxManage
        #shell: bash
        #run: |
          ##! ./ubiquitous_bash.sh _getMost && exit 1
          ##true
          ##! sudo -n apt-get -y clean && exit 1
          ##! ./ubiquitous_bash.sh _getMost_debian11_aptSources && exit 1
          ##sudo -n apt-get update
          ##! sudo -n apt-get -d install -y virtualbox-7.0 && exit 1
          #! sudo -n ./ubiquitous_bash.sh _getMost_ubuntu22-VBoxManage && exit 1
          #df -h
          #df -h /
        #timeout-minutes: 355
      - name: _getMost-xvfb
        shell: bash
        run: |
          #! ./ubiquitous_bash.sh _getMost && exit 1
          #true
          #! sudo -n apt-get -y clean && exit 1
          #! ./ubiquitous_bash.sh _getMost_debian11_aptSources && exit 1
          #sudo -n apt-get update
          #! sudo -n apt-get -d install -y virtualbox-7.0 && exit 1
          #! sudo -n ./ubiquitous_bash.sh _getMost_ubuntu22-VBoxManage && exit 1
          sudo -n env DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confold" install --install-recommends -y xvfb
          df -h
          df -h /
        timeout-minutes: 355
      
      - name: _test_hash_legacy
        shell: bash
        run: |
          if [[ -e "/etc/ssl/openssl_legacy.cnf" ]]
          then
              echo -n | env OPENSSL_CONF="/etc/ssl/openssl_legacy.cnf" openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          else
              echo -n | openssl dgst -whirlpool -binary | xxd -p -c 256
              exit ${PIPESTATUS[0]}
          fi
      
      
      - name: _get_vmImg_ubDistBuild
        shell: bash
        run: |
          current_releaseLabel="${{ inputs.releaseLabel }}"
          #[[ "$current_releaseLabel" == "" ]] && current_releaseLabel="base"
          [[ "$current_releaseLabel" == "" ]] && current_releaseLabel="latest"
          [[ "$current_releaseLabel" == "latest" ]] && current_releaseLabel=""
          #export FORCE_AXEL=8
          #./ubiquitous_bash.sh _get_vmImg_ubDistBuild "latest"
          # DANGER: Github Actions (strictly internal) ONLY!
          export FORCE_AXEL=8
          export MANDATORY_HASH="true"
          cd ./_local
          rm -f hash-download.txt
          ../ubiquitous_bash.sh _wget_githubRelease_join-stdout "soaringDistributions/ubDistBuild" "$current_releaseLabel" "package_image.tar.flx" 2> /dev/null | tee >(../ubiquitous_bash.sh _get_extract_ubDistBuild-tar --extract ./vm.img --to-stdout | env OPENSSL_CONF="/etc/ssl/openssl_legacy.cnf" openssl dgst -whirlpool -binary | xxd -p -c 256 > hash-download.txt) | ../ubiquitous_bash.sh _get_extract_ubDistBuild
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: _hash_img
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          #./ubiquitous_bash.sh _hash_img
          cat _local/hash-download.txt

      - name: fallocate --dig-holes
        shell: bash
        run: |
          fallocate --dig-holes ./_local/vm.img
          
          
          

      
      - name: _create_ubDistBuild-install-ubDistBuild
        shell: bash
        run: |
          ./ubiquitous_bash.sh _create_ubDistBuild-install-ubDistBuild | sudo -n tee ./_create_ubDistBuild-install-ubDistBuild.log && exit ${PIPESTATUS[0]}


      - name: scribe! info! github! custom
        shell: bash
        run: |
          ! ./ubiquitous_bash.sh _openChRoot && exit 1
          ! echo ${{ github.repository }} | ./ubiquitous_bash.sh _chroot tee /info-github-custom && exit 1
          ! echo build-${{ github.run_id }}-${{ github.run_attempt }} | ./ubiquitous_bash.sh _chroot tee -a /info-github-custom && exit 1
          ! date +"%Y-%m-%d" | ./ubiquitous_bash.sh _chroot tee -a /info-github-custom && exit 1
          ! ./ubiquitous_bash.sh _closeChRoot && exit 1
          true
      
      - name: _custom-expand
        shell: bash
        run: |
          ./ubiquitous_bash.sh _custom-expand
      
      - name: _custom-repo
        shell: bash
        run: |
          ./ubiquitous_bash.sh _custom-repo || true
        env:
          GH_TOKEN: ${{ github.token }}
      
      
      - name: _custom
        shell: bash
        run: |
          ./ubiquitous_bash.sh _custom || true
      
      
      - name: _custom-bundle
        shell: bash
        run: |
          ./ubiquitous_bash.sh _custom-bundle || true
        env:
          GH_TOKEN: ${{ github.token }}
          
          
      - name: _rotten_install-kde
        shell: bash
        run: |
          ./ubiquitous_bash.sh _create_ubDistBuild-rotten_install-kde


      - name: _hash_img
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_img
      
      
      
      
      - name: _package_ubDistBuild_image
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _package_ubDistBuild_image | sudo -n tee ./_local/_package_ubDistBuild_image.log && exit ${PIPESTATUS[0]}
      - name: _ubDistBuild_split
        shell: bash
        run: |
          ./ubiquitous_bash.sh _ubDistBuild_split | sudo -n tee ./_lib/_ubDistBuild_split.log && exit ${PIPESTATUS[0]}
        timeout-minutes: 355
      - name: df
        shell: bash
        run: |
          df -h
          df -h /

          
      - name: release! package_image
        shell: bash
        run: |
          #gh release create build-${{ github.run_id }}-${{ github.run_attempt }} --title build --notes ""
          bash -c '
          for currentFile in ./_local/package_image.tar.flx.part*
          do
            ./ubiquitous_bash.sh _stopwatch gh release upload build-${{ github.run_id }}-${{ github.run_attempt }} "$currentFile" &
            while [[ $(jobs | wc -l) -ge 12 ]]
            do
              sleep 2
            done
          done
          wait
          '
        env:
          GH_TOKEN: ${{ github.token }}
          
          



          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          
          






      - name: report! API Rate Limit
        shell: bash
        run: |
          curl -L -H "Accept: application/vnd.github+json" -H "Authorization: Bearer ""${{ secrets.GITHUB_TOKEN }}" -H "X-GitHub-Api-Version: 2022-11-28"  https://api.github.com/rate_limit
          #curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" https://api.github.com/rate_limit | jq -r ".rate"

      - name: fallocate --dig-holes
        shell: bash
        run: |
          fallocate --dig-holes ./_local/vm.img



      #- name: _convert-rootfs
        #shell: bash
        #run: |
          #export current_diskConstrained="true"
          #./ubiquitous_bash.sh _convert_rm
          #./ubiquitous_bash.sh _convert-rootfs | sudo -n tee ./_convert-rootfs.log && exit ${PIPESTATUS[0]}
          
      - name: DUMMY-rootfs
        shell: bash
        run: |
          rm -f ./_local/package_rootfs.tar || true
          rm -f ./_local/package_rootfs.tar.flx || true
          #echo > ./_local/package_rootfs.tar
          #echo > ./_local/package_rootfs.tar.flx
          tar -cf - /dev/null > ./_local/package_rootfs.tar
          tar -cf - /dev/null | lz4 -z --fast=1 - ./_local/package_rootfs.tar.flx

      - name: _hash_rootfs
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_rootfs
      
      - name: _ubDistBuild_split-rootfs
        shell: bash
        run: |
          ./ubiquitous_bash.sh _ubDistBuild_split-rootfs | sudo -n tee ./_lib/_ubDistBuild_split-rootfs.log && exit ${PIPESTATUS[0]}
        timeout-minutes: 355
      - name: df
        shell: bash
        run: |
          df -h
          df -h /
        
      - name: release! package_rootfs
        shell: bash
        run: |
          #gh release create build-${{ github.run_id }}-${{ github.run_attempt }} --title build --notes ""
          bash -c '
          for currentFile in ./_local/package_rootfs.tar.flx.part*
          do
            ./ubiquitous_bash.sh _stopwatch gh release upload build-${{ github.run_id }}-${{ github.run_attempt }} "$currentFile" &
            while [[ $(jobs | wc -l) -ge 3 ]]
            do
              sleep 2
            done
          done
          wait
          '
        env:
          GH_TOKEN: ${{ github.token }}
            
      - name: _package_rm
        shell: bash
        run: |
          ./ubiquitous_bash.sh _package_rm


      
      
      
      
      
      
      
      
      
      
      
      
      
      
      


      - name: fallocate --dig-holes
        shell: bash
        run: |
          fallocate --dig-holes ./_local/vm.img






      - name: _fetchAccessories extendedInterface
        shell: bash
        run: |
          cd _local
          git clone https://github.com/mirage335-colossus/extendedInterface.git
          cd extendedInterface
          mkdir -p ../extendedInterface-accessories/integrations/ubcp
          curl -L -o ../extendedInterface-accessories/integrations/ubcp/package_ubcp-core.7z  $(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/mirage335-colossus/ubiquitous_bash/releases" | jq -r ".[] | select(.name == \"internal\") | .assets[] | select(.name == \"package_ubcp-core.7z\") | .browser_download_url" | sort -n -r | head -n1)  
          ./ubiquitous_bash.sh _build_extendedInterface-fetch | sudo -n tee ../../_lib/_extendedInterface.log && exit ${PIPESTATUS[0]}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: _fetchAccessories ubDistBuild
        shell: bash
        run: |
          cd _local
          git clone https://github.com/soaringDistributions/ubDistBuild.git
          cd ubDistBuild
          mkdir -p ../ubDistBuild-accessories/integrations/ubcp
          curl -L -o ../ubDistBuild-accessories/integrations/ubcp/package_ubcp-core.7z  $(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/mirage335-colossus/ubiquitous_bash/releases" | jq -r ".[] | select(.name == \"internal\") | .assets[] | select(.name == \"package_ubcp-core.7z\") | .browser_download_url" | sort -n -r | head -n1)  
          ./ubiquitous_bash.sh _build_ubDistBuild-fetch | sudo -n tee ../../_lib/_ubDistBuild.log && exit ${PIPESTATUS[0]}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: _convert-live _create_ubDistBuild_feedAccessories
        shell: bash
        run: |
          export current_diskConstrained="true"
          ./ubiquitous_bash.sh _convert_rm
          ./ubiquitous_bash.sh _create_ubDistBuild_feedAccessories | sudo -n tee ./_create_ubDistBuild_feedAccessories.log && exit ${PIPESTATUS[0]}
          ./ubiquitous_bash.sh _safeRMR ./_local/livefs
          true
      
      # DANGER: GitHub Actions ONLY!
      - name: _create_ubDistBuild_feedAccessories rm
        shell: bash
        run: |
          rm -rf ../extendedInterface-accessories
          [[ -e ../extendedInterface-accessories ]] && exit 1 || true
          rm -rf ../ubDistBuild-accessories
          [[ -e ../ubDistBuild-accessories ]] && exit 1 || true
      
      # DANGER: GitHub Actions ONLY!
      - name: _fetchAccessories rm
        shell: bash
        run: |
          cd _local
          rm -rf extendedInterface
          [[ -e extendedInterface ]] && exit 1 || true
          rm -rf ubDistBuild
          [[ -e ubDistBuild ]] && exit 1 || true
      







      - name: _convert-live _convert-live_ISO
        shell: bash
        run: |
          export current_diskConstrained="true"
          ./ubiquitous_bash.sh _convert_rm
          ./ubiquitous_bash.sh _convert-live_ISO | sudo -n tee ./_convert-live_ISO.log && exit ${PIPESTATUS[0]}
          ./ubiquitous_bash.sh _safeRMR ./_local/livefs
          true

      - name: _convert-live log
        shell: bash
        run: |
          #./_create_ubDistBuild_feedAccessories.log
          cat ./_convert-live_ISO.log | sudo -n tee ./_convert-live.log && exit ${PIPESTATUS[0]}

      - name: _hash_live
        shell: bash
        run: |
          export skimfast=${{ inputs.skimfast }}
          echo $skimfast
          ./ubiquitous_bash.sh _hash_live
      
      - name: _ubDistBuild_split-live
        shell: bash
        run: |
          ./ubiquitous_bash.sh _ubDistBuild_split-live
      - name: df
        shell: bash
        run: |
          df -h
          df -h /


      - name: release! live
        shell: bash
        run: |
          #gh release create build-${{ github.run_id }}-${{ github.run_attempt }} --title build --notes ""
          bash -c '
          for currentFile in ./_local/vm-live.iso.part*
          do
            ./ubiquitous_bash.sh _stopwatch gh release upload build-${{ github.run_id }}-${{ github.run_attempt }} "$currentFile" &
            while [[ $(jobs | wc -l) -ge 3 ]]
            do
              sleep 2
            done
          done
          wait
          '
        env:
          GH_TOKEN: ${{ github.token }}













      #- name: _hash_ubdist-fast
        #shell: bash
        #run: |
          #export skimfast=${{ inputs.skimfast }}
          #echo $skimfast
          ##export FORCE_AXEL=8
          ##export MANDATORY_HASH="true"
          #./ubiquitous_bash.sh _hash_ubdist-fast
        #env:
          #GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}











      - name: hash ___________________________
        shell: bash
        run: |
          cat ./_local/_hash-ubdist.txt


      - name: artifacts
        uses: actions/upload-artifact@v3
        with:
          name: _hash-ubdist.txt
          path: |
            ./_local/_hash-ubdist.txt



      - name: release! hash
        shell: bash
        run: |
          gh release upload build-${{ github.run_id }}-${{ github.run_attempt }} ./_local/_hash-ubdist.txt
        env:
          GH_TOKEN: ${{ github.token }}













































